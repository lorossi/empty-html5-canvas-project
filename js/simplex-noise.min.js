function createNoise2D(t=Math.random){const r=buildPermutationTable(t),a=new Float64Array(r).map(t=>grad2[t%12*2]),o=new Float64Array(r).map(t=>grad2[t%12*2+1]);return function(t,e){let n=0,l=0,s=0;const G=(t+e)*F2,c=fastFloor(t+G),f=fastFloor(e+G),i=(c+f)*G2,F=c-i,u=f-i,d=t-F,m=e-u;let w,y;d>m?(w=1,y=0):(w=0,y=1);const A=d-w+G2,g=m-y+G2,p=d-1+2*G2,b=m-1+2*G2,h=255&c,M=255&f;let q=.5-d*d-m*m;if(q>=0){const t=h+r[M],e=a[t],l=o[t];q*=q,n=q*q*(e*d+l*m)}let P=.5-A*A-g*g;if(P>=0){const t=h+w+r[M+y],e=a[t],n=o[t];P*=P,l=P*P*(e*A+n*g)}let T=.5-p*p-b*b;if(T>=0){const t=h+1+r[M+1],e=a[t],n=o[t];T*=T,s=T*T*(e*p+n*b)}return 70*(n+l+s)}}function createNoise3D(t=Math.random){const r=buildPermutationTable(t),a=new Float64Array(r).map(t=>grad3[t%12*3]),o=new Float64Array(r).map(t=>grad3[t%12*3+1]),e=new Float64Array(r).map(t=>grad3[t%12*3+2]);return function(t,n,l){let s,G,c,f;const i=(t+n+l)*F3,F=fastFloor(t+i),u=fastFloor(n+i),d=fastFloor(l+i),m=(F+u+d)*G3,w=F-m,y=u-m,A=d-m,g=t-w,p=n-y,b=l-A;let h,M,q,P,T,D;g>=p?p>=b?(h=1,M=0,q=0,P=1,T=1,D=0):g>=b?(h=1,M=0,q=0,P=1,T=0,D=1):(h=0,M=0,q=1,P=1,T=0,D=1):p<b?(h=0,M=0,q=1,P=0,T=1,D=1):g<b?(h=0,M=1,q=0,P=0,T=1,D=1):(h=0,M=1,q=0,P=1,T=1,D=0);const N=g-h+G3,U=p-M+G3,j=b-q+G3,k=g-P+2*G3,v=p-T+2*G3,x=b-D+2*G3,z=g-1+3*G3,B=p-1+3*G3,C=b-1+3*G3,E=255&F,H=255&u,I=255&d;let J=.6-g*g-p*p-b*b;if(J<0)s=0;else{const t=E+r[H+r[I]];J*=J,s=J*J*(a[t]*g+o[t]*p+e[t]*b)}let K=.6-N*N-U*U-j*j;if(K<0)G=0;else{const t=E+h+r[H+M+r[I+q]];K*=K,G=K*K*(a[t]*N+o[t]*U+e[t]*j)}let L=.6-k*k-v*v-x*x;if(L<0)c=0;else{const t=E+P+r[H+T+r[I+D]];L*=L,c=L*L*(a[t]*k+o[t]*v+e[t]*x)}let O=.6-z*z-B*B-C*C;if(O<0)f=0;else{const t=E+1+r[H+1+r[I+1]];O*=O,f=O*O*(a[t]*z+o[t]*B+e[t]*C)}return 32*(s+G+c+f)}}function createNoise4D(t=Math.random){const r=buildPermutationTable(t),a=new Float64Array(r).map(t=>grad4[t%32*4]),o=new Float64Array(r).map(t=>grad4[t%32*4+1]),e=new Float64Array(r).map(t=>grad4[t%32*4+2]),n=new Float64Array(r).map(t=>grad4[t%32*4+3]);return function(t,l,s,G){let c,f,i,F,u;const d=(t+l+s+G)*F4,m=fastFloor(t+d),w=fastFloor(l+d),y=fastFloor(s+d),A=fastFloor(G+d),g=(m+w+y+A)*G4,p=m-g,b=w-g,h=y-g,M=A-g,q=t-p,P=l-b,T=s-h,D=G-M;let N=0,U=0,j=0,k=0;q>P?N++:U++,q>T?N++:j++,q>D?N++:k++,P>T?U++:j++,P>D?U++:k++,T>D?j++:k++;const v=N>=3?1:0,x=U>=3?1:0,z=j>=3?1:0,B=k>=3?1:0,C=N>=2?1:0,E=U>=2?1:0,H=j>=2?1:0,I=k>=2?1:0,J=N>=1?1:0,K=U>=1?1:0,L=j>=1?1:0,O=k>=1?1:0,Q=q-v+G4,R=P-x+G4,S=T-z+G4,V=D-B+G4,W=q-C+2*G4,X=P-E+2*G4,Y=T-H+2*G4,Z=D-I+2*G4,$=q-J+3*G4,_=P-K+3*G4,tt=T-L+3*G4,rt=D-O+3*G4,at=q-1+4*G4,ot=P-1+4*G4,et=T-1+4*G4,nt=D-1+4*G4,lt=255&m,st=255&w,Gt=255&y,ct=255&A;let ft=.6-q*q-P*P-T*T-D*D;if(ft<0)c=0;else{const t=lt+r[st+r[Gt+r[ct]]];ft*=ft,c=ft*ft*(a[t]*q+o[t]*P+e[t]*T+n[t]*D)}let it=.6-Q*Q-R*R-S*S-V*V;if(it<0)f=0;else{const t=lt+v+r[st+x+r[Gt+z+r[ct+B]]];it*=it,f=it*it*(a[t]*Q+o[t]*R+e[t]*S+n[t]*V)}let Ft=.6-W*W-X*X-Y*Y-Z*Z;if(Ft<0)i=0;else{const t=lt+C+r[st+E+r[Gt+H+r[ct+I]]];Ft*=Ft,i=Ft*Ft*(a[t]*W+o[t]*X+e[t]*Y+n[t]*Z)}let ut=.6-$*$-_*_-tt*tt-rt*rt;if(ut<0)F=0;else{const t=lt+J+r[st+K+r[Gt+L+r[ct+O]]];ut*=ut,F=ut*ut*(a[t]*$+o[t]*_+e[t]*tt+n[t]*rt)}let dt=.6-at*at-ot*ot-et*et-nt*nt;if(dt<0)u=0;else{const t=lt+1+r[st+1+r[Gt+1+r[ct+1]]];dt*=dt,u=dt*dt*(a[t]*at+o[t]*ot+e[t]*et+n[t]*nt)}return 27*(c+f+i+F+u)}}function buildPermutationTable(t){const r=512,a=new Uint8Array(r);for(let t=0;t<r/2;t++)a[t]=t;for(let o=0;o<r/2-1;o++){const r=o+~~(t()*(256-o)),e=a[o];a[o]=a[r],a[r]=e}for(let t=256;t<r;t++)a[t]=a[t-256];return a}const F2=.5*(Math.sqrt(3)-1),G2=(3-Math.sqrt(3))/6,F3=1/3,G3=1/6,F4=(Math.sqrt(5)-1)/4,G4=(5-Math.sqrt(5))/20,fastFloor=t=>0|Math.floor(t),grad2=new Float64Array([1,1,-1,1,1,-1,-1,-1,1,0,-1,0,1,0,-1,0,0,1,0,-1,0,1,0,-1]),grad3=new Float64Array([1,1,0,-1,1,0,1,-1,0,-1,-1,0,1,0,1,-1,0,1,1,0,-1,-1,0,-1,0,1,1,0,-1,1,0,1,-1,0,-1,-1]),grad4=new Float64Array([0,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,1,0,1,1,1,0,1,-1,1,0,-1,1,1,0,-1,-1,-1,0,1,1,-1,0,1,-1,-1,0,-1,1,-1,0,-1,-1,1,1,0,1,1,1,0,-1,1,-1,0,1,1,-1,0,-1,-1,1,0,1,-1,1,0,-1,-1,-1,0,1,-1,-1,0,-1,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,0]);